services:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9001:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka_examples
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9091,kafka3:9091
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_METRICS_TYPE: JMX # JMX or prometheus, default: JMX
      DYNAMIC_CONFIG_ENABLED: 'true'                                          # позволяет изменять конфиг kafka-ui в реальном времени
      # SSL
      #KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SSL
      #KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION: /kafkaui.keystore.jks
      #KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_PASSWORD: "qwerty"
      #KAFKA_CLUSTERS_0_SSL_TRUSTSTORELOCATION: /truststore.jks
      #KAFKA_CLUSTERS_0_SSL_TRUSTSTOREPASSWORD: "qwerty"
      #KAFKA_CLUSTERS_0_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: '' # DISABLE COMMON NAME VERIFICATION
    #volumes:
    #  - type: bind
    #    source: ./certs/kafkaui.keystore.jks
    #    target: /kafkaui.keystore.jks
    #  - type: bind
    #    source: ./certs/truststore.jks
    #    target: /truststore.jks
    networks:
      - kafka_lan
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  kafka1:
    container_name: kafka1
    hostname: kafka1
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29092:29092"                                                                  # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 1                                                                 # Уникальный идентификатор узла в кластере
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                               # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      #KAFKA_CONTROLLER_QUORUM_BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093   # KIP-853 Динамическая конфигурация кворума, в kafka 3.9 все еще нет, хотя в документации указано обратное
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka1:9093,EXTERNAL://:29092           # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9091,EXTERNAL://localhost:29092          # публикуем порты для подключения клиентов
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:PLAINTEXT,EXTERNAL:SSL   # список листенеров с протоколами доступа
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера, основная цель - репликация разделов, запросы между брокерами.
      KAFKA_BROKER_ID: 1
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                             # название слушателя для клиента
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true                                            # разрешаем автоматическое создание топиков
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs' # default: /tmp/kafka-logs
      # SSL use pem files
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka1-keypair.pem
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/root.crt
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka1data:/kafka/data
      - type: bind
        source: ./certs/kafka1-keypair.pem
        target: /etc/kafka/secrets/kafka1-keypair.pem
      - type: bind
        source: ./certs/root.crt
        target: /etc/kafka/secrets/root.crt
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka2:
    container_name: kafka2
    hostname: kafka2
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29093:29093"
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 2
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka2:9093,EXTERNAL://:29093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9091,EXTERNAL://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:PLAINTEXT,EXTERNAL:SSL
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 2
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka2 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      # SSL use pem files
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka2-keypair.pem
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/root.crt
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka2data:/kafka/data
      - type: bind
        source: ./certs/kafka2-keypair.pem
        target: /etc/kafka/secrets/kafka2-keypair.pem
      - type: bind
        source: ./certs/root.crt
        target: /etc/kafka/secrets/root.crt
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka3:
    container_name: kafka3
    hostname: kafka3
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29094:29094"
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 3
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka3:9093,EXTERNAL://:29094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9091,EXTERNAL://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:PLAINTEXT,EXTERNAL:SSL
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 3
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka3 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      # SSL provide certs as string
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_CERTIFICATE_CHAIN: -----BEGIN CERTIFICATE-----\nMIIFpjCCA46gAwIBAgIUNdYYK0nsriTreuGD9bZmGIofzpwwDQYJKoZIhvcNAQEL\nBQAwYzEdMBsGA1UEAwwUcm9vdC5rYWZrYWV4YW1wbGUucnUxDTALBgNVBAsMBFRF\nU1QxFTATBgNVBAoMDEthZmthRXhhbXBsZTEPMA0GA1UEBwwGTW9zY293MQswCQYD\nVQQGEwJSVTAeFw0yNDExMjUwODM1MThaFw0yNTExMjUwODM1MThaMFUxDzANBgNV\nBAMMBmthZmthMzENMAsGA1UECwwEVEVTVDEVMBMGA1UECgwMS2Fma2FFeGFtcGxl\nMQ8wDQYDVQQHDAZNb3Njb3cxCzAJBgNVBAYTAlJVMIICIjANBgkqhkiG9w0BAQEF\nAAOCAg8AMIICCgKCAgEAqbKcu7bZucO9jRz8kF0v1Pii0MHXeaUzK30CIMIZCw5p\nG+JBv+RwVe8FO4XUR9w4ApLJMvu1biUV6a2NsPuDYCP1b2zoejus87dwCgV3gHx7\nb+Lhx1MBi60GnuZeYiyh9p9TOtkTIoA8RtWqgX3p2bWTlEZqAY58eiX1z1jotsAo\nXj2QNHGA3+VprIeVbnUyLhOgih1BwJnn2jFNX87tFYgw5FcbWR3/DmJqn4K/PX9v\ng/etHz7J8qyjkpFSldx0xnWTRm+g16nK+FF8N6bPyQv9xtWS2VzGrj/22K8NdxoF\nV+8glkW/EJhIurG3B8UYeA19DEP3zWYIqZ8tjOKzgQ1sBM3OtUbIjkXgTqZLAqRy\nY4XwZ0YtV2V7R7+szNpg9e5wbvsUZZXlkKMyqkAkJsckWSq6aTDac6hjp6srm/j2\nNpKcrxx+/mMgzC0YX+MEPyOVz875tPNn9ISig7k8CN+eV1V4RLiVacCfclq3+ht+\nfPSYKTtjmkcvKWL9pBk5i6X8rucuJtm5NT89uNWeShrG1m2jIA9q+kk+s21+zoRV\neNWGrG1fJ20MZGCGDrCjZofAvQWacSxv222ZPe1fF0Nv1/rblHzUs/StntcAw4TQ\nD/9u5Vzy2CGvXcieozdnSzAZacYC8CIsnlZefXZWbsD8GOvy9UxH0eukaiTdDdcC\nAwEAAaNgMF4wHAYDVR0RBBUwE4IGa2Fma2Ezgglsb2NhbGhvc3QwHQYDVR0OBBYE\nFFSQBFrGEu7vMMt49fEdkoHIaEqbMB8GA1UdIwQYMBaAFJ82pbak5b8GPW66scuC\n0Ln1PzDUMA0GCSqGSIb3DQEBCwUAA4ICAQBeJYDiwRgfNHaS3uG3KmbKBAg+Jaen\nYf2quLfL6y6lMeY9Y1ZfpjmktyKT9vTy34MrwBky02q+FnPoiPyd3D74XCHrI5rN\niRJncR3xMPhwY9jLm1SUQdxAebrtBY88FDHfMjKWebFi/kWDZYUfuojc/Iwv2zlx\ngPEpMIEiMR8POiQq8dQrzYCeS46H+jashKPSa8rlbkfXRk3oGFQXVPrZD3xxfldU\ntwezBiaHxgLcwE9td0eRtcMTMJfiwnLNLzALua2BiRS+l0qn8JmxyOLsPoHXHIc1\n33D09jdJq69TGOK93UeT23wvUPJF12Ky3riDx4o5tRyhhPibvfFeCvdWafSQLe1b\nEDTHgP/LnlCvQ2Eyi0bbaiL/VZs3Pc0FmwSqdxj4At4xCdhTiHY+mpveEIlD6GC/\nJN9IXw79AZwGsiw1N/xISt8pbFMygiBAdwWMtZOcx8pWx1GAoP+XaMYjH4DGpFnU\nqCOKNLf0DA9rb2lBY3EK3f2K5cZALyi9he5PdMM+1V7pFOo8Oy29770hphirsbo+\nkVWemfilizvd4/PFs62/bkX6dZTBfKizmRz89WvzjHUTsQ7vaKHytBuuFspEibf0\niBsyvMZLIfmpq5nF4/5H6CZ5Bsr8UPZbI9IO6j9hdl0hnR1Gl2kXUAT0gq0eLpTZ\n9lvGamIzJdIynQ==\n-----END CERTIFICATE-----\n
      KAFKA_SSL_KEYSTORE_KEY: -----BEGIN PRIVATE KEY-----\n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\nHjLf+rNVHvipbJB7DpyvQ5UbGe5z+w==\n-----END PRIVATE KEY-----\n
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_CERTIFICATES: -----BEGIN CERTIFICATE-----\nMIIFpzCCA4+gAwIBAgIUNdD4SBgbTHkyfXnBTIRIYFfv6VgwDQYJKoZIhvcNAQEL\nBQAwYzEdMBsGA1UEAwwUcm9vdC5rYWZrYWV4YW1wbGUucnUxDTALBgNVBAsMBFRF\nU1QxFTATBgNVBAoMDEthZmthRXhhbXBsZTEPMA0GA1UEBwwGTW9zY293MQswCQYD\nVQQGEwJSVTAeFw0yNDExMjUwODM1MDhaFw0yNTExMjUwODM1MDhaMGMxHTAbBgNV\nBAMMFHJvb3Qua2Fma2FleGFtcGxlLnJ1MQ0wCwYDVQQLDARURVNUMRUwEwYDVQQK\nDAxLYWZrYUV4YW1wbGUxDzANBgNVBAcMBk1vc2NvdzELMAkGA1UEBhMCUlUwggIi\nMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCzFj6qr1OnsitQUvbQImT065k2\nbtVbzmqZd23e1tYmAOO89QJ0+ltsoCxowUgFrixhzKZVQCiU8nLzoqtDlv5sZlEh\nUapEf1ol6XkRSTPze7G2OHfoqJNRByb7i4GE4HoYvJ1mW59s6S7ox2ZVay9DfJva\nbud2bCTmXO2R3tD8a/MY1CzTgtRBdkwXIA0N6RY9C320maFb2gmz5KoQzAm4MTIC\n2uwy/ibCArJ99P0dbULTN8ue0VnKQu/t38hE/xxl1LZLAmMQVACv05owT/UW+nWi\n1I1dkt2y7aYUhNuCdXlUV9HGOgieHNQNnSwXRYOrhmoc4gWr16igdpWkgOJgdM2p\nORxmJ+nf3ZCRet5g3UWYD9s5aFTjkjwqkzbxynCuEs2LwAUAsodxX3JzQLF6cqfj\nadKLmxGFYam7SzPwEy5YZ8ur+y9uoNy9YWi2spoKvzSSfZREWIelw5bAUvJsIggb\n6I3yG2sy4eyKlisM/Ug1QXSS4U2wauiH6vunMlSIMYR9g8Sl/xgl+/iYznsg2aK9\n9W6qiBcn9B4geokt4DscyjMRMYBjnEGzJGwpHCCKAWfp3dEbGuL3/jJPc+URN7xr\nVT0YHFxWrOXaGvHu0fiKAwVoiLvfV78PLsHUj4U5u+XetaUEFIaX0BlnWVBiI00e\n7BOnLNV1aAWH67pB8QIDAQABo1MwUTAdBgNVHQ4EFgQUnzaltqTlvwY9brqxy4LQ\nufU/MNQwHwYDVR0jBBgwFoAUnzaltqTlvwY9brqxy4LQufU/MNQwDwYDVR0TAQH/\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAesk1UuJQKvPgHgDRfAKAAMc3va1+\nrB6XFLbMp/EyaRxy+fXKLbEp542slMizaVWlnMGZVDJYyA2iuHPZY0Nb2P+5o9re\n986Au316HxpNqgbKkL3uUVQKSOYIfKkMIj+QWfnneCgRwSnYTGxM/iCMSinyjx70\ngC5jQ+XJQ8fMeRKme+blsk/2bqhyCfzqM+wGjZvl2z/vs9ky8jPL+YhpJJg873S2\nIiUm/Jhw2qYCZy0Z2nvLJD+lyrNcUTYOc6hw3NV7J3d4TeOSz6IeQnG4AmUwFbmd\nGBb38c1fVx62uxq0pmz7mgBTWGv3dLvXoIkICSW3+5+RHA5WfdFrB6Rhn6Qx7KBi\nNW1KV0ujfulRprBmjoaZfaJo4JXCLEgp5zl5Rt+kcaHuub7WbNdhI7jGY8DKIOp5\nO3TzyMtZmfmcAQBc5xS5nb64UauPbkU8Io2jmukTWq73nZsDlnSFk4Asahybrwp1\nAMYYq+5wUfMUuNw7adDmBEq3eCLqoZuNEYaZs7NVzndr+iy/7EUDxZ5+Mk7+SGdG\nzRRP1sbl/6IrF/4+MyJpvjdTNKt52H9RZ9I3YLtItjYg9tMsBXwQeWW75q3FRMKD\nU0/Pd/VxMbcKmZj0kVQcgQ5dRf7Xwlyv/igFYBNZyvK54rzv1qepT65LzwtEE2Em\nEsjnDbT1pM1oAGs=\n-----END CERTIFICATE-----\n
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka3data:/kafka/data
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  kafka1data:
    driver: local
  kafka2data:
    driver: local
  kafka3data:
    driver: local

networks:
  kafka_lan:
    driver: bridge