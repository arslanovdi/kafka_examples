services:

  kafka-ui:
    container_name: kafkaui
    hostname: kafkaui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9001:8080"
    environment:
      #KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_CLUSTERS_0_NAME: kafka_examples
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9091,kafka3:9091
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_METRICS_TYPE: JMX # JMX or prometheus, default: JMX
      DYNAMIC_CONFIG_ENABLED: true                                          # позволяет изменять конфиг kafka-ui в реальном времени
      # SSL
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SSL
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_TYPE: PEM
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION: /kafkaui-keypair.pem
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: /rootCA.jks
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: qwerty
    volumes:
      - type: bind
        source: ./certs/kafkaui-keypair.pem
        target: /kafkaui-keypair.pem
      - type: bind
        source: ./certs/rootCA.jks
        target: /rootCA.jks
    networks:
      - kafka_lan
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  kafka1:
    container_name: kafka1
    hostname: kafka1
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29092:29092"                                                                  # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 1                                                                 # Уникальный идентификатор узла в кластере
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                               # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      #KAFKA_CONTROLLER_QUORUM_BOOTSTRAP_SERVERS: kafka1:9093,kafka2:9093,kafka3:9093   # KIP-853 Динамическая конфигурация кворума, в kafka 3.9 все еще нет, хотя в документации указано обратное
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka1:9093,EXTERNAL://:29092     # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9091,EXTERNAL://localhost:29092    # список слушателей, для доступа извне контейнера
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:SSL,EXTERNAL:SSL   # список листенеров с протоколами доступа
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера, основная цель - репликация разделов, запросы между брокерами.
      KAFKA_BROKER_ID: 1
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                             # название слушателя для клиента
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true                                            # разрешаем автоматическое создание топиков
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs' # default: /tmp/kafka-logs
      # SSL use pem files
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka1-keypair.pem
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/rootCA.crt
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka1data:/kafka/data
      - type: bind
        source: ./certs/kafka1-keypair.pem
        target: /etc/kafka/secrets/kafka1-keypair.pem
      - type: bind
        source: ./certs/rootCA.crt
        target: /etc/kafka/secrets/rootCA.crt
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka2:
    container_name: kafka2
    hostname: kafka2
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29093:29093"
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 2
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka2:9093,EXTERNAL://:29093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9091,EXTERNAL://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:SSL,EXTERNAL:SSL
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 2
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka2 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      # SSL use pem files
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka2-keypair.pem
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/rootCA.crt
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka2data:/kafka/data
      - type: bind
        source: ./certs/kafka2-keypair.pem
        target: /etc/kafka/secrets/kafka2-keypair.pem
      - type: bind
        source: ./certs/rootCA.crt
        target: /etc/kafka/secrets/rootCA.crt
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka3:
    container_name: kafka3
    hostname: kafka3
    image: apache/kafka:3.9.0
    restart: unless-stopped
    ports:
      - "29094:29094"
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 3
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://kafka3:9093,EXTERNAL://:29094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9091,EXTERNAL://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,INTERNAL:SSL,EXTERNAL:SSL
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 3
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTINGS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka3 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      # SSL provide certs as string
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_KEYSTORE_CERTIFICATE_CHAIN: -----BEGIN CERTIFICATE-----\nMIIFpjCCA46gAwIBAgIUfh94V2c27m4bbCrRB0OpkS2mtlUwDQYJKoZIhvcNAQEL\nBQAwYzEdMBsGA1UEAwwUcm9vdC5rYWZrYWV4YW1wbGUucnUxDTALBgNVBAsMBFRF\nU1QxFTATBgNVBAoMDEthZmthRXhhbXBsZTEPMA0GA1UEBwwGTW9zY293MQswCQYD\nVQQGEwJSVTAeFw0yNDExMjUxNzA3MzNaFw0yNTExMjUxNzA3MzNaMFUxDzANBgNV\nBAMMBmthZmthMzENMAsGA1UECwwEVEVTVDEVMBMGA1UECgwMS2Fma2FFeGFtcGxl\nMQ8wDQYDVQQHDAZNb3Njb3cxCzAJBgNVBAYTAlJVMIICIjANBgkqhkiG9w0BAQEF\nAAOCAg8AMIICCgKCAgEAphkBYR8xobpO02g/qCDYvWgtxIgBCfKlRbSdCOc+guc7\ncI81wKq/uJts4Fdf1p+Fu5A77UEEwUIK6zcn6mSr4b8elqD5Rzy9rUKWcamKkDaP\n7UOu9k2lj0TBS7pEwAhdrsb55y0rm978mD2F4zfP9aOZxOmNBpQ99I6r5tB2mHwc\nDK3ng0Q25K5ysMNR2lo2IByoGsx7XYTyrtiivGGExrZ6rXRJ0OAs0OZp+9vnW+zv\nTMU6cDGDHkxiUV84UhVmA/lioFLIS9Chy0OFG1IqHlhCDCLXYvJsVZWABfDKmE5q\nnZ298P/tRO3VpzLG7MyIeu4W3kFxr/YiyT8MCPTsj5AJq0Cx4j3ykkEeXdPFKm0R\nzH68uSzfmkmS912RUqn31UPxV2cPCcCDVl5RBqujbXYGS6XOODV8q+u+e5/tB5Q7\nIuYRA9H6wnmjkRHia70oRCMEdr5Ql/6nuGRNIx8473OTbd0uHbUE/+6EyOW+kNcx\n9GlikIUPAaKalVSe2lkx2U0dC3CGI2TAvHvLnXEOCBl4haS550n188HIens5VSfU\n9v/9Jq/yMcow3a/88BP7mcuQzn8DK/4MwjtQOxQSJl5CFXW4HU5q0YPZanOGtzMi\nKtsz2NNe0xQxf7+qVYs5RrXGWbovk/NGiu0OfhkCb1qhWIoU6wMl0ekHs1eTIU8C\nAwEAAaNgMF4wHAYDVR0RBBUwE4IGa2Fma2Ezgglsb2NhbGhvc3QwHQYDVR0OBBYE\nFBe6A3n/JyG8E4XHpwQIFB1sycl7MB8GA1UdIwQYMBaAFMENjkhfUQ6ot1QSCBM2\niWcSLerjMA0GCSqGSIb3DQEBCwUAA4ICAQAil8zsT6ckZ7z34v6D9p0Yfbf2XrC4\nGhxTkDVxlEvkdkVqPl+NV/TyktuA4qw747jKHjvtd1EX/dCX0NGDTb9yiXEnRLYm\ns3Jgixmbh8FC9Y2Wwt1HVBDq//YMvMJlTx39zUHeKxJ6p2FLRwjKulQmmImWqiLe\n2QOuQyqrgmQdd4QSb96JMYnMCiXmGs7tkV/FK5h38vbsH5cie2lnlY4lDsGdeMk3\ndcGTccEtxslTTwJ4ei0Agy/8+6NXMfN3uUxl2vqpVoydIOgEERPUn7SU6zx3Q6Ny\nvT4yXHX10YW1GtXg3qnVtZew8it3Fri/E6D8x9+Cc779ZT63AoFGmrbwWxpZ6RL/\nLKJ9tyZbdsFaFjDVm9BKHxHznDJvCGzcd6XR7i9ceuF8f8OM/Eu0y4T81MaemZCo\nFgKGqZaT2W2ktAiEWhPGouY1Cf9HCYaEEu9vuWdtwCzZpUTrUuDW2CCOVIolKfMM\nEbHn38Fv+GCBXlAMBbc/fxtSipwy0tocZRsGjG152fI0KnxLxTSqjaJw+zbkj4Cj\n4ytOY+ecE5ej9qpT2Ns9VkYiTmL6nSQx11e9lRvNQUxO/Oue60U7iCYGcknGkfGU\n/rD4tWhBtTmeAstDnyRrOy5/7i998NRf0NQtOprWuS+mLJ8+mZNZVHIJrWQtj4vH\ntlMYasHTJioW/w==\n-----END CERTIFICATE-----\n
      KAFKA_SSL_KEYSTORE_KEY: -----BEGIN PRIVATE KEY-----\n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\nrL3bh3e/JCuqQngjWgV60DUEtqx0\n-----END PRIVATE KEY-----\n
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_CERTIFICATES: -----BEGIN CERTIFICATE-----\nMIIFpzCCA4+gAwIBAgIUGSF9DTyk3rih/9zVdLZnsRHg4sAwDQYJKoZIhvcNAQEL\nBQAwYzEdMBsGA1UEAwwUcm9vdC5rYWZrYWV4YW1wbGUucnUxDTALBgNVBAsMBFRF\nU1QxFTATBgNVBAoMDEthZmthRXhhbXBsZTEPMA0GA1UEBwwGTW9zY293MQswCQYD\nVQQGEwJSVTAeFw0yNDExMjUxNzA3MjBaFw0yNTExMjUxNzA3MjBaMGMxHTAbBgNV\nBAMMFHJvb3Qua2Fma2FleGFtcGxlLnJ1MQ0wCwYDVQQLDARURVNUMRUwEwYDVQQK\nDAxLYWZrYUV4YW1wbGUxDzANBgNVBAcMBk1vc2NvdzELMAkGA1UEBhMCUlUwggIi\nMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCQXKHDLJ4vBb60g3iJSWtk/4G5\nV+bF23QyV/Xb0ZQUxcVuTI0gKY+p3crMrw44KEb6NpSHLDzpogjUopTnjY+7Vwl1\nz8/C89TT5H/X2Hfl1ekso/Cfa6ZHUTwdZGbcMw9rqX2pCdQT4FiiVGZLYXWkVZyR\nYjjImYe4SlWqdk/dhtQ3rppTlJjY2Y8ONCuXwbUraIAgdM4WfNWbEm1TKvKzKett\nDUcWWBzqbHafAu73EMkYRfSl88NnxQILgxPBU7lwQy4tIPbiDChBUtIymuZX84m0\nCCH/o4wsbV3jLYtggn6XUhx9ndHMvn4fV1ctmczEc1TfiYGatYiZbz7W6so+/vDV\njGnM4CTMZRsXj04FUIaNq6PhxAM63346t9zdEesW3+lMfYZt8CzdDiSvNk7pcdfJ\nFkJSZTaiyCl9RF7+XiaW+sqMaZw0qUKDNwdqPTl3GKNLoPm47JiZWhMOrKbXsu70\nlIEErvaZedGsysTUQa06qQdcajuwmzzb++Q/lkyk6i7wFr88C45dMSUbMCrEfZqh\nfStW28GMRImuT1XcQ5/V5UNQnz3F76Y0/0UBqOQqSGG0hw2CrCZv9qT+XuhOx4tb\nK5th15KRxuTapXUKaOkMFfo8JoMTFINKMPlltXKOcr2hW/mJzzSsz3xIvrC0CB9I\ntiaT8rO/e05HDDL9qQIDAQABo1MwUTAdBgNVHQ4EFgQUwQ2OSF9RDqi3VBIIEzaJ\nZxIt6uMwHwYDVR0jBBgwFoAUwQ2OSF9RDqi3VBIIEzaJZxIt6uMwDwYDVR0TAQH/\nBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAd3Z6rW41m3m9xXeVup4tOodAng3X\nxNkzzj+Wa4qyBK0aBuEDYHW7JIRaMTdTeDYo15s7nK0oSWkw1lEFguxvYjGxkUzq\n5SrcRMe8+hxf3tORgia7rgbSkU5neY7jt72koLtYDVTJQgElagH9/VtbZdryn+MA\nmit+YvVnqI2FGRk/0395TTKt5A076ircQSjHxgrTsNfsBJKJElwQxGGiXDp63QMP\nduy3KNNV6fDPexAkmm9Gs7yl5AACtFRsJarxYMz8cmV4fBYbOGN231Bx8TIu82ym\n6NDrUbdaeE6sKfYSGo9kAcSMPTtMdgnAtrNGDYmQM68FAvrxaKPUAswnKS9ERg9o\np3IvVGvCY6wtiwM++n71xrkCkCF26mOSJ58mxSEdxysPd8GKDZ7sfQf14geVOL9c\ngWoCtpOYFW9wj1zJV56ox8sWFW+tiF4haIXgHkvWfZgId72kAfaK7B2AYTMGo4Yj\nNs7F/haCMelJvYep1GIlKiUvcYotQW99qep48sCGxd2SsjyNfHihdMCpCrsELBce\nUhFOHCZkGXzy0aPZmE+YFni/A9KDnx7ZlY2mJMnXvW+6UTiUo9nAHgcoCFXmFUKb\n0BF9KXVdEfNfYnqY4oRBQOu+AkvnqNq0Dc070MyqZlNSkE/e0Al2rzaqKs1sHVrf\nmzUQ0CFt1XWBSaE=\n-----END CERTIFICATE-----\n
      # SSL clients
      KAFKA_SSL_CLIENT_AUTH: required
    networks:
      - kafka_lan
    volumes:
      - kafka3data:/kafka/data
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  kafka1data:
    driver: local
  kafka2data:
    driver: local
  kafka3data:
    driver: local

networks:
  kafka_lan:
    driver: bridge